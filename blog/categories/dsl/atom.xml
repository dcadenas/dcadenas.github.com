<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: DSL | Daniel Cadenas]]></title>
  <link href="http://dcadenas.github.com/blog/categories/dsl/atom.xml" rel="self"/>
  <link href="http://dcadenas.github.com/"/>
  <updated>2012-03-18T03:51:11-03:00</updated>
  <id>http://dcadenas.github.com/</id>
  <author>
    <name><![CDATA[Daniel Cadenas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby and DSLs]]></title>
    <link href="http://dcadenas.github.com/blog/2007/10/29/ruby-and-dsls/"/>
    <updated>2007-10-29T00:38:00-02:00</updated>
    <id>http://dcadenas.github.com/blog/2007/10/29/ruby-and-dsls</id>
    <content type="html"><![CDATA[<p><a href="http://www.xaop.com/articles/2007/10/07/metaprogramming">Here</a> you can see an excelent screencast by Peter Vanbroekhoven about creating DSLs in Ruby. This is another appealing aspect of the language. At work I program mainly in C# and I couldn't avoid comparing his example with Linq. I still didn't put my hands deeply on Linq, and I guess it must be much bigger than Peter's example but I can't avoid being amazed at the simplicity in which he shows how to have your own hand made Linq in Ruby with very little work.</p>

<p>So Ruby seems to be not just a programming language, it's a DSL programming language which it's something extremely powerful due to the productivity and readability that brings the higher level of abstraction. That's always good.</p>
]]></content>
  </entry>
  
</feed>
