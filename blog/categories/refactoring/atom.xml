<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Refactoring | Daniel Cadenas]]></title>
  <link href="http://dcadenas.github.com/blog/categories/refactoring/atom.xml" rel="self"/>
  <link href="http://dcadenas.github.com/"/>
  <updated>2012-03-18T02:56:28-03:00</updated>
  <id>http://dcadenas.github.com/</id>
  <author>
    <name><![CDATA[Daniel Cadenas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[More about refactoring]]></title>
    <link href="http://dcadenas.github.com/blog/2007/12/08/more-about-refactoring/"/>
    <updated>2007-12-08T19:09:00-02:00</updated>
    <id>http://dcadenas.github.com/blog/2007/12/08/more-about-refactoring</id>
    <content type="html"><![CDATA[<p>Some points of disagreement with the critique against the <a href="http://www.amazon.com/Refactoring-Improving-Existing-Addison-Wesley-Technology/dp/0201485672">refactoring book</a> found in <a href="http://www.codinghorror.com/blog/archives/000589.html">this article about smells</a>.</p>

<ul>
<li><p>Assuming that he is right in that most of us know how to refactor, I think that's because experience gave us the needed knowledge. Time and pain was needed. This time and pain, as in any knowledge area, can be reduced by reading books, like Fowler's.</p></li>
<li><p>Apart from this, I think even a developer with experience and knowledge of most refactorings could miss some smells. We are humans and we acquire bad habits.</p></li>
<li><p>A big part of the knowledge gained with experience is too intuitive and that brings some problems. When things are intuitive and you suddenly find someone that doesn't share your intuition you have to discuss with solid explicit arguments. Fowler's book helps you ease the work needed to find those arguments letting you show clearly why your intuition is the way it is. You can do it yourself of course, but it's easier to reuse the effort someone else did, if you share it of course.</p></li>
<li><p>The book defines a vocabulary to deal with our intuition or implicit concepts, that is very very important. Now we can share it and we can communicate more efficiently. The same advantage we discovered after design patterns appeared.</p></li>
<li><p>He agrees with Fowler that smells are important. The book is a reference to smells. IMO refactoring is more about identifying design problems (smells) than about the relatively simple things needed to make them disappear, but it's both.</p></li>
<li><p>Things that are important, like smells, must be made explicit so the problem can be easily studied and possibly build some more knowledge on higher level concepts. One of those higher level concepts that could be further developed was the development philosophy of <a href="http://martinfowler.com/ieeeSoftware/continuousDesign.pdf">Continuous Design</a> in which a core concept is refactoring.</p></li>
<li><p>I think there's a confusion between simplicity and importance. Not only complicated books are important.</p></li>
</ul>


<p>Seems that a big reason for this disagreement comes from not seeing a tight relationship between code smells and refactoring as explained in <a href="/blog/2007/12/03/meaning-of-refactoring">this previous post</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The meaning of refactoring]]></title>
    <link href="http://dcadenas.github.com/blog/2007/12/03/meaning-of-refactoring/"/>
    <updated>2007-12-03T02:21:00-02:00</updated>
    <id>http://dcadenas.github.com/blog/2007/12/03/meaning-of-refactoring</id>
    <content type="html"><![CDATA[<p>For a lot of people refactoring is not important. For some people this is because they don't know the correct meaning. They think it's just the name someone made up to describe any code change.</p>

<p>That's not refactoring.</p>

<p>You refactor when the changes you make <strong>improve</strong> the design while keeping its behaviour unchanged. Knowing <a href="http://martinfowler.com/bliki/CodeSmell.html">when</a> and <a href="http://www.amazon.com/Refactoring-Improving-Existing-Addison-Wesley-Technology/dp/0201485672">how</a> this improvement should be systematically made is what is taught in the literature.</p>

<p>But there's another group of people that know the correct definition but still don't believe in it. This is because they measure their design quality just by its behaviour, so if the code already does what it's intended to do, they think it's good code. They believe in the <em>Don't touch the design if it's not broken</em> mantra (a slightly more valid reason to believe in this comes from lacking a good set of tests that act as a safety net for your design improvements).</p>

<p>For this reason they slowly start accumulating <a href="http://c2.com/cgi/wiki?DesignDebt">design debt</a>. At some point, not too far in time, this unattended design improvement brings the impossibility to change code as it can't be controlled. This is because it's too difficult to understand and see all consequences of any change they may do, so either they don't change code anymore, or if they do, they start seeing bugs appear everywhere because they broke something they couldn't see it could get broken. So they say <em>You see? I was right, code shouldn't be changed if it's not broken</em>, a self-fulfilling prophecy.</p>

<p>So in summary, refactoring requires the ability to systematically <a href="http://martinfowler.com/bliki/CodeSmell.html">identify</a> and improve problematic designs and it's important because it pays your design debt. This is necessary to understand and change your code easily.</p>

<p>This are great books you can read to improve refactoring skills:</p>

<ul>
<li><a href="http://www.amazon.com/Refactoring-Improving-Existing-Addison-Wesley-Technology/dp/0201485672">Refactoring: Improving the Design of Existing Code</a></li>
<li><a href="http://www.amazon.com/Refactoring-Patterns-Addison-Wesley-Signature-Kerievsky/dp/0321213351">Refactoring to Patterns</a></li>
<li><a href="http://www.amazon.com/xUnit-Test-Patterns-Refactoring-Addison-Wesley/dp/0131495054">xUnit Test Patterns: Refactoring Test Code</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
